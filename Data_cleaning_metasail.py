import pandas as pd
import re
from names_dataset import NameDataset


class DataCleaner:
    """
    Une classe pour nettoyer et pr√©traiter les donn√©es statistiques de Metasail.
    """

    def __init__(self, file_path):
        """
        Initialise le DataCleaner et charge le jeu de donn√©es.
        :param file_path: Chemin vers le fichier CSV.
        """
        try:
            self.df = pd.read_csv(file_path)
            print("‚úÖ Fichier charg√© avec succ√®s.")
            # Initialise la base de donn√©es de pr√©noms pour la correction
            self.nd = NameDataset()
        except FileNotFoundError:
            print(f"‚ùå Erreur : Le fichier {file_path} n'a pas √©t√© trouv√©.")
            self.df = None

    def supprimer_colonnes_inutiles(self, colonnes_a_supprimer):
        """
        Supprime les colonnes sp√©cifi√©es du DataFrame.

        :param colonnes_a_supprimer: Une liste de noms de colonnes √† supprimer.
        """
        if self.df is None:
            return

        # Ne supprime que les colonnes qui existent r√©ellement pour √©viter les erreurs
        colonnes_existantes = [col for col in colonnes_a_supprimer if col in self.df.columns]
        self.df.drop(columns=colonnes_existantes, inplace=True)
        print(f"üóëÔ∏è Colonnes supprim√©es : {colonnes_existantes}")

    def nettoyer_noms(self):
        """
        Corrige les colonnes 'Pr√©nom' et 'Nom de famille'.
        Cette m√©thode combine les deux champs, identifie le pr√©nom le plus probable
        √† l'aide de la librairie names-dataset, et s√©pare de nouveau correctement les noms.
        La recherche est maintenant effectu√©e en mode 'fuzzy' pour tol√©rer les l√©g√®res diff√©rences.
        """
        if self.df is None or 'Pr√©nom' not in self.df.columns or 'Nom de famille' not in self.df.columns:
            print("‚ö†Ô∏è Colonnes 'Pr√©nom' ou 'Nom de famille' introuvables. √âtape de nettoyage des noms ignor√©e.")
            return

        def corriger_separation_nom(row):
            # S'assure que les valeurs sont des cha√Ænes de caract√®res et g√®re les valeurs vides (NaN)
            prenom = str(row['Pr√©nom']) if pd.notna(row['Pr√©nom']) else ''
            nom_famille = str(row['Nom de famille']) if pd.notna(row['Nom de famille']) else ''

            nom_complet = f"{prenom} {nom_famille}".strip()
            elements = nom_complet.split()

            # Cas o√π le nom complet est vide
            if not elements:
                return '', ''

            nouveau_prenom = ''
            nouveau_nom = ''

            # On v√©rifie d'abord si le premier mot ou le dernier est un pr√©nom connu via fuzzy search
            premier_mot = elements[0]
            dernier_mot = elements[-1]

            # Un seuil de 0.8 est un bon compromis pour le fuzzy matching
            # Une correspondance exacte est aussi couverte par un score de 1.0

            # V√©rification du premier mot
            resultat_premier = self.nd.search_fuzzy(premier_mot)
            if resultat_premier and resultat_premier[0]['score'] > 0.8:
                nouveau_prenom = premier_mot
                nouveau_nom = ' '.join(elements[1:])
                return nouveau_prenom, nouveau_nom

            # V√©rification du dernier mot
            if len(elements) > 1:
                resultat_dernier = self.nd.search_fuzzy(dernier_mot)
                if resultat_dernier and resultat_dernier[0]['score'] > 0.8:
                    nouveau_prenom = dernier_mot
                    nouveau_nom = ' '.join(elements[:-1])
                    return nouveau_prenom, nouveau_nom

            # Si aucune correspondance fuzzy n'est trouv√©e, on utilise la logique initiale
            # pour identifier les pr√©noms dans le nom complet
            nouveau_prenom_elements = []
            nouveau_nom_famille_elements = []

            for element in elements:
                resultat_recherche = self.nd.search(element)
                if resultat_recherche['first_name']:
                    nouveau_prenom_elements.append(element)
                else:
                    nouveau_nom_famille_elements.append(element)

            # Si aucun pr√©nom n'a √©t√© trouv√©, on suppose que le premier mot est le pr√©nom
            if not nouveau_prenom_elements and elements:
                nouveau_prenom = elements[0]
                nouveau_nom = ' '.join(elements[1:])
            else:
                nouveau_prenom = ' '.join(nouveau_prenom_elements)
                nouveau_nom = ' '.join(nouveau_nom_famille_elements)

            return nouveau_prenom, nouveau_nom

        print("üîÑ Nettoyage des colonnes 'Pr√©nom' et 'Nom de famille' en cours...")
        # Applique la fonction √† chaque ligne du DataFrame
        self.df[['Pr√©nom', 'Nom de famille']] = self.df.apply(corriger_separation_nom, axis=1, result_type='expand')
        print("‚úÖ Noms nettoy√©s.")

    def traiter_colonne_course(self):
        """
        Extrait la cat√©gorie d'√¢ge et le sexe de la colonne 'Course',
        les place dans de nouvelles colonnes, et nettoie la colonne 'Course' originale.
        """
        if self.df is None or 'Course' not in self.df.columns:
            print("‚ö†Ô∏è Colonne 'Course' introuvable. √âtape de traitement de la course ignor√©e.")
            return

        print("üîÑ Traitement de la colonne 'Course' pour extraire la cat√©gorie d'√¢ge et le sexe...")
        colonne_course = self.df['Course'].astype(str)

        # --- 1. Extraire le Sexe ---
        self.df['Sexe'] = colonne_course.str.extract(r'(Men|Women)', flags=re.IGNORECASE, expand=False).str.capitalize()

        # --- 2. Extraire et unifier la Cat√©gorie d'√¢ge ---
        # D√©finition des expressions r√©guli√®res pour les cat√©gories
        pattern_u17 = r'U\s*17|Under\s*17|JUNIOR'
        pattern_u19 = r'U\s*19|Under\s*19|YOUTH'

        # Cr√©ation de la nouvelle colonne
        self.df['Cat√©gorie d\'√¢ge'] = None

        # Assignation des cat√©gories en fonction des patterns trouv√©s
        self.df.loc[colonne_course.str.contains(pattern_u17, flags=re.IGNORECASE, na=False), 'Cat√©gorie d\'√¢ge'] = 'U17'
        self.df.loc[colonne_course.str.contains(pattern_u19, flags=re.IGNORECASE, na=False), 'Cat√©gorie d\'√¢ge'] = 'U19'

        # --- 3. Nettoyer la colonne 'Course' ---
        # Combinaison de tous les √©l√©ments √† supprimer dans une seule expression r√©guli√®re
        pattern_a_supprimer = f"({pattern_u17}|{pattern_u19}|Men|Women|IQfoil)"

        # Remplacement de toutes les occurrences par une cha√Æne vide
        course_nettoyee = colonne_course.str.replace(pattern_a_supprimer, '', flags=re.IGNORECASE, regex=True)
        # Suppression des espaces superflus
        self.df['Course'] = course_nettoyee.str.replace(r'\s+', ' ', regex=True).str.strip()

        print("‚úÖ Nouvelles colonnes 'Sexe' et 'Cat√©gorie d\'√¢ge' cr√©√©es et colonne 'Course' nettoy√©e.")

    def obtenir_dataframe_nettoye(self):
        """
        Retourne le DataFrame nettoy√©.
        """
        return self.df

    def sauvegarder_en_csv(self, chemin_sortie):
        """
        Sauvegarde le DataFrame nettoy√© dans un nouveau fichier CSV.
        """
        if self.df is not None:
            self.df.to_csv(chemin_sortie, index=False, encoding='utf-8-sig')
            print(f"üíæ Fichier nettoy√© sauvegard√© avec succ√®s sous : {chemin_sortie}")


# --- Bloc d'ex√©cution principal ---
if __name__ == '__main__':
    # Sp√©cifiez le chemin de votre fichier d'entr√©e ici
    fichier_entree = 'Metasail_Statistics_ML_test.xlsx - Sheet1.csv'
    fichier_sortie = 'Metasail_Statistics_ML_test_cleaned.csv'

    # Cr√©ation d'une instance du nettoyeur de donn√©es
    nettoyeur = DataCleaner(fichier_entree)

    # V√©rifie si le DataFrame a √©t√© charg√© correctement avant de continuer
    if nettoyeur.obtenir_dataframe_nettoye() is not None:
        # 1. D√©finir les colonnes √† supprimer et lancer la suppression
        colonnes_a_supprimer = ['Position de d√©part', 'VMG maximale', 'VMG moyenne', 'Classement sortie de segment']
        nettoyeur.supprimer_colonnes_inutiles(colonnes_a_supprimer)

        # 2. Nettoyer les colonnes de nom et pr√©nom
        nettoyeur.nettoyer_noms()

        # 3. Traiter la colonne 'Course' pour en extraire les informations
        nettoyeur.traiter_colonne_course()

        # R√©cup√©rer le DataFrame final
        dataframe_nettoye = nettoyeur.obtenir_dataframe_nettoye()

        # Afficher un aper√ßu des donn√©es transform√©es
        print("\n--- Aper√ßu des 5 premi√®res lignes des donn√©es nettoy√©es ---")
        print(dataframe_nettoye.head())

        # Afficher des informations sur les nouvelles colonnes cr√©√©es
        print("\n--- Informations sur les nouvelles colonnes ---")
        print("Valeurs uniques dans 'Sexe':", dataframe_nettoye['Sexe'].unique())
        print("Valeurs uniques dans 'Cat√©gorie d'√¢ge':", dataframe_nettoye['Cat√©gorie d\'√¢ge'].unique())
        print("\n--- Aper√ßu de la colonne 'Course' nettoy√©e ---")
        print(dataframe_nettoye['Course'].head())

        # 4. Sauvegarder le r√©sultat
        nettoyeur.sauvegarder_en_csv(fichier_sortie)