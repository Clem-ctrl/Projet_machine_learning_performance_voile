import pandas as pd
import re
from names_dataset import NameDataset
import numpy as np


class DataCleaner:
    """
    Une classe pour nettoyer et pr√©traiter les donn√©es statistiques de Metasail.
    """

    def __init__(self, file_path):
        """
        Initialise le DataCleaner et charge le jeu de donn√©es.
        :param file_path: Chemin vers le fichier Excel.
        """
        try:
            self.df = pd.read_excel(file_path)
            print("‚úÖ Fichier Excel charg√© avec succ√®s.")
            # Initialise la base de donn√©es de pr√©noms pour l'assignation de sexe
            self.nd = NameDataset()
        except FileNotFoundError:
            print(f"‚ùå Erreur : Le fichier {file_path} n'a pas √©t√© trouv√©.")
            self.df = None
        except Exception as e:
            print(f"‚ùå Une erreur s'est produite lors de la lecture du fichier : {e}")
            self.df = None

    def supprimer_colonnes_inutiles(self, colonnes_a_supprimer):
        """
        Supprime les colonnes sp√©cifi√©es du DataFrame.
        :param colonnes_a_supprimer: Une liste de noms de colonnes √† supprimer.
        """
        if self.df is None:
            return

        colonnes_existantes = [col for col in colonnes_a_supprimer if col in self.df.columns]
        self.df.drop(columns=colonnes_existantes, inplace=True, errors='ignore')
        print(f"üóëÔ∏è Colonnes supprim√©es : {colonnes_existantes}")

    def filtrer_statut_course(self):
        """
        Supprime les lignes o√π le statut de la course est 'abandonned' ou 'recall'.
        """
        if self.df is None or 'Course' not in self.df.columns:
            print("‚ö†Ô∏è Colonne 'Course' introuvable. √âtape de filtrage de la course ignor√©e.")
            return

        print("üîÑ Suppression des lignes 'abandonned' et 'recall'...")
        lignes_initiales = len(self.df)
        self.df = self.df[~self.df['Course'].str.contains('abandon|recall', case=False, na=False)]
        lignes_supprimees = lignes_initiales - len(self.df)
        print(f"‚úÖ {lignes_supprimees} ligne(s) 'abandonned' ou 'recall' supprim√©e(s).")

    def splitter_date(self, nom_colonne_date='Date'):
        """
        Divise une colonne de date en trois nouvelles colonnes : Ann√©e, Mois, Jour.
        :param nom_colonne_date: Le nom de la colonne contenant les dates.
        """
        if self.df is None or nom_colonne_date not in self.df.columns:
            print(f"‚ö†Ô∏è Colonne '{nom_colonne_date}' introuvable. Le split de la date est ignor√©.")
            return

        print(f"üîÑ Division de la colonne '{nom_colonne_date}' en Ann√©e, Mois, Jour...")
        self.df[nom_colonne_date] = pd.to_datetime(self.df[nom_colonne_date])
        self.df['Ann√©e'] = self.df[nom_colonne_date].dt.year
        self.df['Mois'] = self.df[nom_colonne_date].dt.month
        self.df['Jour'] = self.df[nom_colonne_date].dt.day
        self.df.drop(columns=[nom_colonne_date], inplace=True)
        print(f"‚úÖ Colonnes Ann√©e, Mois, Jour cr√©√©es. Colonne '{nom_colonne_date}' supprim√©e.")

    def traiter_colonne_course(self):
        """
        Extrait la cat√©gorie d'√¢ge et le sexe de la colonne 'Course',
        et nettoie la colonne 'Course' originale.
        """
        if self.df is None or 'Course' not in self.df.columns:
            print("‚ö†Ô∏è Colonne 'Course' introuvable. √âtape de traitement de la course ignor√©e.")
            return

        print("üîÑ Traitement de la colonne 'Course' pour extraire la cat√©gorie d'√¢ge et le sexe...")
        colonne_course = self.df['Course'].astype(str)
        self.df['Sexe'] = colonne_course.str.extract(r'(Men|Women)', flags=re.IGNORECASE, expand=False).str.capitalize()
        pattern_u17 = r'U\s*17|Under\s*17|JUNIOR'
        pattern_u19 = r'U\s*19|Under\s*19|YOUTH'
        self.df["Cat√©gorie d'√¢ge"] = pd.Series(dtype='object')
        self.df.loc[colonne_course.str.contains(pattern_u17, flags=re.IGNORECASE, na=False), "Cat√©gorie d'√¢ge"] = 'U17'
        self.df.loc[colonne_course.str.contains(pattern_u19, flags=re.IGNORECASE, na=False), "Cat√©gorie d'√¢ge"] = 'U19'
        pattern_a_supprimer = f"({pattern_u17}|{pattern_u19}|Men|Women|IQfoil)"
        course_nettoyee = colonne_course.str.replace(pattern_a_supprimer, '', flags=re.IGNORECASE, regex=True)
        self.df['Course'] = course_nettoyee.str.replace(r'\s+', ' ', regex=True).str.strip()
        print("‚úÖ Nouvelles colonnes 'Sexe' et 'Cat√©gorie d'√¢ge' cr√©√©es et colonne 'Course' nettoy√©e.")

    def completer_sexe_manquant(self):
        """
        Remplit les valeurs manquantes dans la colonne 'Sexe' en se basant
        sur l'analyse du pr√©nom le plus probable dans 'Nom Complet'.
        """
        if self.df is None or 'Nom Complet' not in self.df.columns or 'Sexe' not in self.df.columns:
            print("‚ö†Ô∏è Colonnes 'Nom Complet' ou 'Sexe' introuvables. Impossible de compl√©ter le sexe.")
            return

        print("\nüîÑ D√©but de la compl√©tion des sexes manquants...")

        def predire_sexe_par_prenom(nom_complet):
            if not isinstance(nom_complet, str) or not nom_complet:
                return np.nan

            mots = nom_complet.split()
            prenom_candidat = None
            meilleur_rang = float('inf')

            for mot in mots:
                resultat = self.nd.search(mot)
                if resultat['first_name'] is not None:
                    ranks = [v for v in resultat['first_name']['rank'].values() if v is not None]
                    if ranks:
                        meilleur_rang_mot = min(ranks)
                        if meilleur_rang_mot < meilleur_rang:
                            meilleur_rang = meilleur_rang_mot
                            prenom_candidat = mot

            if prenom_candidat:
                resultat_prenom = self.nd.search(prenom_candidat)
                prob_male = resultat_prenom['first_name']['gender'].get('Male', 0)
                prob_female = resultat_prenom['first_name']['gender'].get('Female', 0)

                if prob_female > prob_male:
                    return 'Women'
                elif prob_male > prob_female:
                    return 'Men'
                else:
                    return np.nan
            else:
                return np.nan

        if 'Sexe' not in self.df.columns:
            self.df['Sexe'] = pd.Series(dtype='object')

        masque_sexe_vide = self.df['Sexe'].isnull()
        self.df.loc[masque_sexe_vide, 'Sexe'] = self.df.loc[masque_sexe_vide, 'Nom Complet'].apply(
            predire_sexe_par_prenom)

        print("\n‚úÖ Tentative de compl√©tion des sexes manquants termin√©e.")

    def completer_age_manquant(self):
        """
        Remplit les valeurs manquantes dans la colonne 'Cat√©gorie d'√¢ge'
        en se basant sur les valeurs non vides pour le m√™me "Num√©ro de s√©rie" et "Nom Complet".
        """
        if self.df is None or "Cat√©gorie d'√¢ge" not in self.df.columns or 'Num√©ro de s√©rie' not in self.df.columns or 'Nom Complet' not in self.df.columns:
            print(
                "‚ö†Ô∏è Colonnes requises ('Cat√©gorie d'√¢ge', 'Num√©ro de s√©rie', 'Nom Complet') introuvables. Compl√©tion de l'√¢ge ignor√©e.")
            return

        print("\nüîÑ D√©but de la compl√©tion des √¢ges manquants...")
        lignes_initiales = self.df["Cat√©gorie d'√¢ge"].isnull().sum()
        valeurs_valides = self.df.dropna(subset=["Cat√©gorie d'√¢ge"]).set_index(['Num√©ro de s√©rie', 'Nom Complet'])[
            "Cat√©gorie d'√¢ge"].to_dict()

        def appliquer_age(row):
            if pd.isnull(row["Cat√©gorie d'√¢ge"]):
                cle = (row['Num√©ro de s√©rie'], row['Nom Complet'])
                if cle in valeurs_valides:
                    return valeurs_valides.get(cle)
                else:
                    return "Senior"
            return row["Cat√©gorie d'√¢ge"]

        self.df["Cat√©gorie d'√¢ge"] = self.df.apply(appliquer_age, axis=1)
        lignes_remplies = self.df["Cat√©gorie d'√¢ge"].isnull().sum()
        print(f"‚úÖ {lignes_initiales - lignes_remplies} valeurs d'√¢ge manquantes ont √©t√© compl√©t√©es.")

    def get_dataframe(self):
        """ Retourne le DataFrame nettoy√©. """
        return self.df

    def save_to_excel(self, chemin_sortie):
        """ Sauvegarde le DataFrame nettoy√© dans un nouveau fichier Excel. """
        if self.df is not None:
            self.df.to_excel(chemin_sortie, index=False)
            print(f"üíæ Fichier nettoy√© sauvegard√© avec succ√®s sous : {chemin_sortie}")


if __name__ == '__main__':
    fichier_entree = 'Metasail_Statistics_ML_test.xlsx'
    fichier_sortie = 'Metasail_Statistics_ML_test_cleaned.xlsx'

    nettoyeur = DataCleaner(fichier_entree)

    if nettoyeur.get_dataframe() is not None:
        colonnes_a_supprimer = ['Position de d√©part', 'Classement sortie de segment', 'Vitesse maximale (noeuds)',
                                'VMG maximale', 'VMC maximale', 'VMG moyenne']
        nettoyeur.supprimer_colonnes_inutiles(colonnes_a_supprimer)
        nettoyeur.traiter_colonne_course()
        nettoyeur.filtrer_statut_course()
        nettoyeur.splitter_date(nom_colonne_date='Date de la course')
        nettoyeur.completer_sexe_manquant()
        nettoyeur.completer_age_manquant()

        dataframe_final = nettoyeur.get_dataframe()
        nettoyeur.save_to_excel(fichier_sortie)
