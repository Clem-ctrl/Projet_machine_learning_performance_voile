import pandas as pd
import numpy as np
from scipy.stats import zscore
from datetime import timedelta, datetime
import os


class DataProcessor:
    """
    Une classe pour nettoyer les donn√©es et calculer des m√©triques complexes.
    Elle g√®re les valeurs aberrantes en se basant sur un DataFrame unique.
    """

    def __init__(self, df_metasail):
        """
        Initialise le DataProcessor avec le DataFrame Metasail nettoy√© et fusionn√©.
        :param df_metasail: DataFrame pandas des donn√©es de Metasail fusionn√©es.
        """
        self.df_metasail = df_metasail
        if self.df_metasail is None or self.df_metasail.empty:
            print("‚ùå Le DataFrame Metasail est vide. Les calculs ne peuvent pas √™tre effectu√©s.")

    def remove_outliers_zscore(self, threshold=3):
        """
        Supprime les valeurs aberrantes en utilisant la m√©thode du z-score.
        Cible les colonnes de vitesse moyenne, VMG et efficacit√© de segment.
        """
        print("\n--- Suppression des outliers (Z-score) ---")
        cols_to_check = ["Vitesse moyenne (noeuds)", "VMG", "Efficacit√© du segment (%)"]

        if not all(col in self.df_metasail.columns for col in cols_to_check):
            print(f"‚ùå Colonnes requises manquantes pour le Z-score. Ignor√©.")
            return

        initial_rows = len(self.df_metasail)
        z_scores = self.df_metasail[cols_to_check].apply(zscore)
        self.df_metasail = self.df_metasail[(np.abs(z_scores) < threshold).all(axis=1)]

        rows_removed = initial_rows - len(self.df_metasail)
        print(f"‚úÖ {rows_removed} lignes aberrantes supprim√©es (seuil Z-score = {threshold}).")

    def remove_implausible_distances(self):
        """
        Supprime les lignes o√π les distances parcourues sont incoh√©rentes
        par rapport aux distances id√©ales (avec une tol√©rance).
        """
        print("\n--- Suppression des distances incoh√©rentes ---")

        if "Distance totale parcourue (m)" in self.df_metasail.columns and "Longueur totale du parcours (m)" in self.df_metasail.columns:
            rows_before = len(self.df_metasail)
            self.df_metasail = self.df_metasail[
                self.df_metasail["Distance totale parcourue (m)"] >= (
                            self.df_metasail["Longueur totale du parcours (m)"] - 30)
                ]
            print(
                f"‚úÖ {rows_before - len(self.df_metasail)} lignes supprim√©es (Distance totale < Longueur totale - 30m).")

        if "Distance r√©elle du segment (m)" in self.df_metasail.columns and "Longueur du c√¥t√© du segment (m)" in self.df_metasail.columns:
            rows_before = len(self.df_metasail)
            self.df_metasail = self.df_metasail[
                self.df_metasail["Distance r√©elle du segment (m)"] >= (
                            self.df_metasail["Longueur du c√¥t√© du segment (m)"] - 30)
                ]
            print(
                f"‚úÖ {rows_before - len(self.df_metasail)} lignes supprim√©es (Distance segment < Longueur segment - 30m).")

    def remove_low_efficiency(self):
        """
        Supprime les lignes o√π l'efficacit√© est inf√©rieure √† un seuil r√©aliste.
        """
        print("\n--- Suppression des faibles efficacit√©s ---")

        if "Efficacit√© (Distance r√©elle/id√©ale) (%)" in self.df_metasail.columns:
            rows_before = len(self.df_metasail)
            self.df_metasail = self.df_metasail[self.df_metasail["Efficacit√© (Distance r√©elle/id√©ale) (%)"] >= 97]
            print(f"‚úÖ {rows_before - len(self.df_metasail)} lignes supprim√©es (Efficacit√© globale < 97%).")

        if "Efficacit√© du segment (%)" in self.df_metasail.columns:
            rows_before = len(self.df_metasail)
            self.df_metasail = self.df_metasail[self.df_metasail["Efficacit√© du segment (%)"] >= 94]
            print(f"‚úÖ {rows_before - len(self.df_metasail)} lignes supprim√©es (Efficacit√© segment < 94%).")

    def remove_wind_direction_discrepancies(self, tolerance=30):
        """
        Supprime les lignes o√π la direction du vent de la m√©t√©o diff√®re trop
        de celle de Metasail.
        """
        print("\n--- Suppression des incoh√©rences de direction du vent ---")

        required_cols = ["Wind Direction (deg)", "Orientation vent metasail"]
        if not all(col in self.df_metasail.columns for col in required_cols):
            print(f"‚ùå Colonnes de vent requises manquantes. Ignor√©.")
            return

        initial_rows = len(self.df_metasail)
        angle_diff = np.abs(self.df_metasail["Wind Direction (deg)"] - self.df_metasail["Orientation vent metasail"])
        angle_diff = angle_diff.apply(lambda x: min(x, 360 - x))

        self.df_metasail = self.df_metasail[angle_diff <= tolerance]

        rows_removed = initial_rows - len(self.df_metasail)
        print(f"‚úÖ {rows_removed} lignes supprim√©es (diff√©rence de vent > {tolerance}¬∞).")

    def manage_outliers(self):
        """
        M√©thode principale pour orchestrer le nettoyage des donn√©es et la
        suppression des valeurs aberrantes.
        """
        print("\n" + "=" * 50)
        print("üßπ GESTION DES VALEURS ABERRANTES")
        print("=" * 50)

        initial_total_rows = len(self.df_metasail)

        self.remove_outliers_zscore()
        self.remove_implausible_distances()
        self.remove_low_efficiency()
        self.remove_wind_direction_discrepancies()

        final_total_rows = len(self.df_metasail)
        total_removed = initial_total_rows - final_total_rows

        print("\n" + "-" * 50)
        print(f"üìä Bilan du nettoyage : {total_removed} lignes supprim√©es au total.")
        print(f"Il reste {final_total_rows} lignes dans le DataFrame.")
        print("-" * 50)

    def calculate_new_metrics(self):
        """
        Calcule les nouvelles m√©triques d'efficacit√© par rapport au vent.
        """
        print("\n" + "=" * 50)
        print("üìà CALCUL DES NOUVELLES M√âTRIQUES LI√âES AU VENT")
        print("=" * 50)

        required_cols = ["Efficacit√© du segment (%)", "Wind Speed (kts)", "Cap magn√©tique (deg)",
                         "Wind Direction (deg)"]
        if not all(col in self.df_metasail.columns for col in required_cols):
            missing_cols = list(set(required_cols) - set(self.df_metasail.columns))
            print(f"‚ùå Colonnes requises manquantes : {missing_cols}. Calculs ignor√©s.")
            return

        self.df_metasail["Efficacit√© segment / Wind Speed"] = self.df_metasail["Efficacit√© du segment (%)"] / \
                                                              self.df_metasail["Wind Speed (kts)"]
        print("‚úÖ 'Efficacit√© segment / Wind Speed' calcul√©.")

        angle_diff = np.abs(self.df_metasail["Cap magn√©tique (deg)"] - self.df_metasail["Wind Direction (deg)"])
        self.df_metasail["Angle Vent-Cap"] = angle_diff.apply(lambda x: min(x, 360 - x))

        pres_condition = self.df_metasail["Angle Vent-Cap"] < 90
        portant_condition = self.df_metasail["Angle Vent-Cap"] >= 90

        self.df_metasail["Efficacit√© Pr√®s (%)"] = np.nan
        self.df_metasail.loc[pres_condition, "Efficacit√© Pr√®s (%)"] = self.df_metasail.loc[
            pres_condition, "Efficacit√© du segment (%)"]
        print("‚úÖ 'Efficacit√© Pr√®s (%)' calcul√©.")

        self.df_metasail["Efficacit√© Portant (%)"] = np.nan
        self.df_metasail.loc[portant_condition, "Efficacit√© Portant (%)"] = self.df_metasail.loc[
            portant_condition, "Efficacit√© du segment (%)"]
        print("‚úÖ 'Efficacit√© Portant (%)' calcul√©.")


def main():
    """ Fonction principale pour ex√©cuter le traitement des donn√©es. """
    input_path = "C:/Users/Byron Barette/PycharmProjects/Projet_machine_learning_performance_voile/Metasail_Statistics_unified_cleaned.xlsx"
    output_path = "C:/Users/Byron Barette/PycharmProjects/Projet_machine_learning_performance_voile/Metasail_Statistics_unified_processed.xlsx"

    try:
        if not os.path.exists(input_path):
            raise FileNotFoundError(f"Fichier d'entr√©e Metasail introuvable : {input_path}")

        dataframe_metasail = pd.read_excel(input_path)
        print("‚úÖ Fichier charg√© avec succ√®s.")

        processeur = DataProcessor(dataframe_metasail)

        # Gestion des outliers et nettoyage des donn√©es
        processeur.manage_outliers()

        # Calcul des nouvelles m√©triques
        processeur.calculate_new_metrics()

        # Sauvegarde du fichier final
        processeur.df_metasail.to_excel(output_path, index=False)
        print(f"üíæ Fichier trait√© et calcul√© sauvegard√© avec succ√®s sous : {output_path}")

    except FileNotFoundError as e:
        print(f"‚ùå Erreur : {e}")
    except Exception as e:
        print(f"‚ùå Une erreur inattendue est survenue : {e}")


if __name__ == "__main__":
    main()