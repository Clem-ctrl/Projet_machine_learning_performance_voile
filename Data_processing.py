import pandas as pd
import numpy as np
from datetime import timedelta, datetime

# Configuration des fichiers
FICHIER_METASAIL = "Metasail_Statistics_unified_cleaned.xlsx"
FICHIER_WEATHER = "weather_data_cleaned.xlsx"
FICHIER_SORTIE = "Metasail_Statistics_unified_processed.xlsx"


class DataProcessor:
    """
    Une classe pour calculer des m√©triques complexes √† partir de donn√©es nettoy√©es.
    Elle int√®gre des donn√©es de deux sources diff√©rentes.
    """

    def __init__(self, df_metasail, df_weather):
        """
        Initialise le DataProcessor avec les DataFrames de Metasail et de m√©t√©o.
        :param df_metasail: DataFrame pandas des donn√©es de Metasail.
        :param df_weather: DataFrame pandas des donn√©es m√©t√©o.
        """
        self.df_metasail = df_metasail
        self.df_weather = df_weather
        if self.df_metasail is None or self.df_metasail.empty:
            print("‚ùå Le DataFrame Metasail est vide. Les calculs ne peuvent pas √™tre effectu√©s.")
        if self.df_weather is None or self.df_weather.empty:
            print("‚ùå Le DataFrame m√©t√©o est vide. Les calculs de vent et de courant ne peuvent pas √™tre effectu√©s.")

    def _prepare_data_for_merge(self):
        """
        Pr√©pare les DataFrames pour la fusion.
        Cr√©e une cl√© de jointure combinant la date, le lieu et l'heure.
        """
        print("\n" + "=" * 50)
        print("üõ†Ô∏è PR√âPARATION DES DONN√âES POUR LA FUSION")
        print("=" * 50)

        # Cr√©ation de la colonne de date pour les deux DataFrames
        self.df_metasail["Date"] = pd.to_datetime(
            self.df_metasail[["Ann√©e", "Mois", "Jour"]].astype(str).agg("-".join, axis=1), errors="coerce"
        ).dt.date
        self.df_weather["Date"] = pd.to_datetime(
            self.df_weather[["Year", "Month", "Day"]].astype(str).agg("-".join, axis=1), errors="coerce"
        ).dt.date

        # Correction de la gestion des dates : Combinaison de la date et de l'heure
        base_dt = pd.to_datetime(
            self.df_metasail['Ann√©e'].astype(str) + '-' + self.df_metasail['Mois'].astype(str) + '-' + self.df_metasail[
                'Jour'].astype(str),
            errors='coerce'
        )

        start_timedelta = pd.to_timedelta(self.df_metasail["D√©but du segment (timestamp)"].astype(str))
        end_timedelta = pd.to_timedelta(self.df_metasail["Fin du segment (timestamp)"].astype(str))

        self.df_metasail["D√©but du segment_dt"] = base_dt + start_timedelta
        self.df_metasail["Fin du segment_dt"] = base_dt + end_timedelta

        # G√©rer le cas o√π la fin du segment est le jour suivant
        self.df_metasail.loc[self.df_metasail["Fin du segment_dt"] < self.df_metasail[
            "D√©but du segment_dt"], "Fin du segment_dt"] += timedelta(days=1)

        # Calculer le temps central du segment pour la fusion
        self.df_metasail["Temps du segment_dt"] = (self.df_metasail["D√©but du segment_dt"] + (
                    self.df_metasail["Fin du segment_dt"] - self.df_metasail["D√©but du segment_dt"]) / 2).dt.time

        print("‚úÖ Donn√©es de date et heure pr√©par√©es.")

    def _find_closest_weather_data(self):
        """
        Recherche et fusionne les donn√©es m√©t√©o les plus proches pour chaque ligne de Metasail.
        """
        print("\n" + "=" * 50)
        print("üîç RECHERCHE ET FUSION DES DONN√âES M√âT√âO LES PLUS PROCHES")
        print("=" * 50)

        # Initialisation des colonnes de donn√©es m√©t√©o
        self.df_metasail["Wind Speed (kts)"] = np.nan
        self.df_metasail["Wind Direction (deg)"] = np.nan

        # Set pour stocker les lieux d√©j√† signal√©s comme manquants
        ignored_locations = set()

        # It√©ration sur chaque ligne du DataFrame Metasail
        for index, row_metasail in self.df_metasail.iterrows():
            if pd.isna(row_metasail["Date"]) or pd.isna(row_metasail["Temps du segment_dt"]):
                continue

            # V√©rification des valeurs manquantes dans la colonne 'Lieu de l'√©v√©nement'
            if pd.isna(row_metasail["Lieu de l'√©v√©nement"]):
                continue

            lieu = row_metasail["Lieu de l'√©v√©nement"].lower()
            date = row_metasail["Date"]

            # Correction de la syntaxe pour le filtrage
            filtered_weather = self.df_weather[
                (self.df_weather["Date"] == date) &
                (self.df_weather["City"].str.lower() == lieu)
                ].copy()

            if filtered_weather.empty:
                # V√©rifie si le lieu a d√©j√† √©t√© signal√© pour cette ex√©cution
                if lieu not in ignored_locations:
                    print(
                        f"‚ö†Ô∏è Aucune donn√©e m√©t√©o trouv√©e pour le lieu {row_metasail['Lieu de l\'√©v√©nement']} le {date}. Les lignes de cette zone seront ignor√©es.")
                    ignored_locations.add(lieu)
                continue

            # Calcule la diff√©rence de temps et trouve la ligne la plus proche
            filtered_weather["time_diff"] = filtered_weather["Time_dt"].apply(
                lambda x: abs(datetime.combine(datetime.min.date(), x) - datetime.combine(datetime.min.date(),
                                                                                          row_metasail[
                                                                                              "Temps du segment_dt"]))
            )
            closest_weather_index = filtered_weather["time_diff"].idxmin()
            closest_weather = filtered_weather.loc[closest_weather_index]

            # Mise √† jour des colonnes dans le DataFrame original
            self.df_metasail.at[index, "Wind Speed (kts)"] = closest_weather["Wind Speed (kts)"]
            self.df_metasail.at[index, "Wind Direction (deg)"] = closest_weather["Wind Direction (deg)"]

        print("‚úÖ Fusion des donn√©es m√©t√©o termin√©e.")

    def recalculer_et_nettoyer_metriques(self):
        """
        Recalcule le temps de segment, la VMC moyenne et la vitesse moyenne.
        """
        if self.df_metasail is None:
            return

        print("\n" + "=" * 50)
        print("üîß RECALCUL DES M√âTRIQUES DE PERFORMANCE DU SEGMENT")
        print("=" * 50)

        required_cols = ["D√©but du segment (timestamp)", "Fin du segment (timestamp)",
                         "Distance r√©elle parcourue segment (m)", "Longueur du segment (m)"]
        if not all(col in self.df_metasail.columns for col in required_cols):
            print("‚ùå Colonnes requises pour le recalcule manquantes.")
            return

        # Correction : utilisation des colonnes d√©j√† cr√©√©es pour le calcul
        self.df_metasail["delta_time"] = self.df_metasail["Fin du segment_dt"] - self.df_metasail["D√©but du segment_dt"]
        self.df_metasail.loc[self.df_metasail["delta_time"] < timedelta(0), "delta_time"] += timedelta(days=1)
        self.df_metasail["Temps du segment (s)"] = self.df_metasail["delta_time"].dt.total_seconds()
        print("‚úÖ 'Temps du segment (s)' recalcul√© avec succ√®s.")

        safe_time = self.df_metasail["Temps du segment (s)"].replace(0, np.nan)
        self.df_metasail["Vitesse moyenne (noeuds)"] = (self.df_metasail[
                                                            "Distance r√©elle parcourue segment (m)"] / safe_time) * 1.94384
        print("‚úÖ 'Vitesse moyenne (noeuds)' recalcul√©e avec succ√®s.")

        self.df_metasail["VMC moyenne"] = (self.df_metasail["Longueur du segment (m)"] / safe_time) * 1.94384
        print("‚úÖ 'VMC moyenne' recalcul√©e avec succ√®s.")

        # Suppression des colonnes existantes de m√©triques pour √©viter les doublons
        cols_to_drop = ["Vitesse maximale (noeuds)", "VMG maximale", "VMC maximale", "VMG moyenne"]
        self.df_metasail.drop(columns=cols_to_drop, inplace=True, errors="ignore")

    def calculate_new_metrics(self):
        """
        Calcule les nouvelles m√©triques d'efficacit√© par rapport au vent en utilisant le cap entre les bou√©es.
        """
        print("\n" + "=" * 50)
        print("üìà CALCUL DES NOUVELLES M√âTRIQUES LI√âES AU VENT")
        print("=" * 50)

        # V√©rification des colonnes n√©cessaires
        required_cols = ["Efficacit√© du segment (%)", "Wind Speed (kts)", "Cap magn√©tique (deg)",
                         "Wind Direction (deg)"]
        if not all(col in self.df_metasail.columns for col in required_cols):
            print(
                f"‚ùå Colonnes requises pour le calcul des nouvelles m√©triques manquantes : {list(set(required_cols) - set(self.df_metasail.columns))}")
            return

        # Efficacit√© (Distance r√©elle/id√©ale) (%) / wind speed
        self.df_metasail["Efficacit√© segment / Wind Speed"] = self.df_metasail["Efficacit√© du segment (%)"] / \
                                                              self.df_metasail["Wind Speed (kts)"]
        print("‚úÖ 'Efficacit√© segment / Wind Speed' calcul√© avec succ√®s.")

        # Calculer la diff√©rence d'angle entre le vent et le cap du segment
        # Un angle de 0¬∞ ou 360¬∞ signifie que la bou√©e est directement au vent.
        # Un angle de 180¬∞ signifie que la bou√©e est directement sous le vent.
        self.df_metasail["Angle Vent-Cap"] = np.abs(
            self.df_metasail["Cap magn√©tique (deg)"] - self.df_metasail["Wind Direction (deg)"])
        self.df_metasail["Angle Vent-Cap"] = self.df_metasail["Angle Vent-Cap"].apply(lambda x: min(x, 360 - x))

        # D√©finition des conditions de navigation (pr√®s ou portant)
        # Un segment est au "pr√®s" si l'angle entre le vent et le cap du segment est inf√©rieur √† 90 degr√©s.
        # Un segment est au "portant" si cet angle est sup√©rieur ou √©gal √† 90 degr√©s.
        pres_condition = (self.df_metasail["Angle Vent-Cap"] < 90)
        portant_condition = (self.df_metasail["Angle Vent-Cap"] >= 90)

        # Efficacit√© (Distance r√©elle/id√©ale) (%) au pr√®s
        self.df_metasail["Efficacit√© Pr√®s (%)"] = np.nan
        self.df_metasail.loc[pres_condition, "Efficacit√© Pr√®s (%)"] = self.df_metasail.loc[
            pres_condition, "Efficacit√© du segment (%)"]
        print("‚úÖ 'Efficacit√© Pr√®s (%)' calcul√© avec succ√®s.")

        # Efficacit√© (Distance r√©elle/id√©ale) (%) au portant
        self.df_metasail["Efficacit√© Portant (%)"] = np.nan
        self.df_metasail.loc[portant_condition, "Efficacit√© Portant (%)"] = self.df_metasail.loc[
            portant_condition, "Efficacit√© du segment (%)"]
        print("‚úÖ 'Efficacit√© Portant (%)' calcul√© avec succ√®s.")


def main():
    """ Fonction principale pour ex√©cuter le traitement des donn√©es. """
    try:
        # Chargez les deux fichiers
        dataframe_metasail = pd.read_excel(FICHIER_METASAIL)
        dataframe_weather = pd.read_excel(FICHIER_WEATHER)
        print("‚úÖ Fichiers charg√©s avec succ√®s.")

        # √âtape 1 : Traitement et calcul des m√©triques
        processeur = DataProcessor(dataframe_metasail, dataframe_weather)

        # Pr√©pare et fusionne les donn√©es m√©t√©o
        processeur._prepare_data_for_merge()
        processeur._find_closest_weather_data()

        # Recalcule les m√©triques de performance
        processeur.recalculer_et_nettoyer_metriques()

        # Calcule les nouvelles m√©triques d'efficacit√© au vent
        processeur.calculate_new_metrics()

        # Sauvegarde du fichier final
        processeur.df_metasail.to_excel(FICHIER_SORTIE, index=False)
        print(f"üíæ Fichier trait√© et calcul√© sauvegard√© avec succ√®s sous : {FICHIER_SORTIE}")

    except FileNotFoundError as e:
        print(f"‚ùå Erreur : L'un des fichiers requis n'a pas √©t√© trouv√©. {e}")
    except Exception as e:
        print(f"‚ùå Une erreur inattendue est survenue : {e}")


if __name__ == "__main__":
    main()
