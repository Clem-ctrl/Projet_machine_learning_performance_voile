import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import timedelta


class PerformanceVerifier:
    """
    Une classe pour valider les m√©triques de performance des segments Metasail
    et d√©tecter les valeurs aberrantes.
    """

    def __init__(self, file_path):
        """
        Initialise le v√©rificateur de performance et charge les donn√©es.
        :param file_path: Chemin vers le fichier Excel contenant les donn√©es.
        """
        try:
            self.df = pd.read_excel(file_path)
            print(f"‚úÖ Fichier '{file_path}' charg√© avec succ√®s.")
        except FileNotFoundError:
            print(f"‚ùå Erreur : Le fichier {file_path} n'a pas √©t√© trouv√©.")
            self.df = None
        except Exception as e:
            print(f"‚ùå Une erreur s'est produite lors de la lecture du fichier : {e}")
            self.df = None

    def detect_outliers_on_distance(self):
        """
        D√©tecte les valeurs aberrantes sur la 'Distance r√©elle du segment (m)'
        en utilisant la m√©thode du Z-Score.
        """
        if self.df is None:
            return

        col = 'Distance r√©elle du segment (m)'
        if col not in self.df.columns:
            print(f"‚ö†Ô∏è Colonne '{col}' introuvable pour la d√©tection des valeurs aberrantes.")
            return

        print("\n" + "=" * 50)
        print("üîé D√âTECTION DES VALEURS ABERRANTES SUR LA DISTANCE R√âELLE DU SEGMENT")
        print("=" * 50)

        # --- M√©thode du Z-Score ---
        mean = self.df[col].mean()
        std = self.df[col].std()
        z_score_threshold = 3.0
        outliers_zscore = self.df[np.abs((self.df[col] - mean) / std) > z_score_threshold]

        print(f"\n--- Rapport d'anomalies pour la colonne '{col}' ---")

        if not outliers_zscore.empty:
            print(f"  üîπ {len(outliers_zscore)} valeur(s) aberrante(s) d√©tect√©e(s) par la m√©thode Z-Score.")
            print("Aper√ßu des valeurs aberrantes (Z-Score) :")
            print(outliers_zscore[[col, 'Nom Complet']].head().to_string(index=False))
        else:
            print("\n  ‚úÖ Aucune valeur aberrante d√©tect√©e par la m√©thode Z-Score.")

        plt.figure(figsize=(12, 5))
        plt.subplot(1, 2, 1)
        sns.boxplot(x=self.df[col])
        plt.title(f'Boxplot de "{col}" (pour identifier les valeurs aberrantes)')

        plt.subplot(1, 2, 2)
        sns.histplot(self.df[col], kde=True)
        plt.title(f'Distribution de "{col}"')

        plt.tight_layout()
        plt.show()

    def identify_short_distances(self, tolerance=30):
        """
        Identifie et affiche les lignes o√π la distance r√©elle est inf√©rieure
        √† la longueur du c√¥t√© du segment, avec une tol√©rance.
        :param tolerance: Marge de tol√©rance en m√®tres.
        """
        if self.df is None:
            return

        required_cols = ['Distance r√©elle du segment (m)', 'Longueur du c√¥t√© du segment (m)']
        if not all(col in self.df.columns for col in required_cols):
            print("‚ùå Colonnes requises pour la comparaison des distances manquantes.")
            return

        short_distances_df = self.df[
            self.df['Distance r√©elle du segment (m)'] < (self.df['Longueur du c√¥t√© du segment (m)'] - tolerance)]

        print("\n" + "=" * 50)
        print("üìè ANALYSE DES DISTANCES R√âELLES INF√âRIEURES √Ä LA LONGUEUR DU SEGMENT")
        print(f"**Tol√©rance appliqu√©e : {tolerance} m√®tres**")
        print("=" * 50)

        if not short_distances_df.empty:
            print(
                f"üîπ {len(short_distances_df)} lignes trouv√©es o√π la 'Distance r√©elle' est anormalement plus courte que la 'Longueur du c√¥t√©'.")
            print("\nAper√ßu des 5 premi√®res lignes :")
            print(short_distances_df[['Nom Complet', 'Nom de l\'√©v√©nement', 'Distance r√©elle du segment (m)',
                                      'Longueur du c√¥t√© du segment (m)']].head().to_string(index=False))
        else:
            print(f"‚úÖ Aucune ligne anormale trouv√©e avec une tol√©rance de {tolerance} m√®tres.")

    def check_total_distance_consistency(self, tolerance=30):
        """
        Meme v√©rif mais sur tout le parcours. V√©rifie la coh√©rence entre la distance totale parcourue et la longueur
        totale du parcours, avec une tol√©rance.
        :param tolerance: Marge de tol√©rance en m√®tres.
        """
        if self.df is None:
            return

        required_cols = ['Longueur totale du parcours (m)', 'Distance totale parcourue (m)',
                         'Efficacit√© (Distance r√©elle/id√©ale) (%)']
        if not all(col in self.df.columns for col in required_cols):
            print("‚ùå Colonnes requises pour la v√©rification de la distance totale manquantes.")
            return

        # Appliquer la tol√©rance de 30m ici
        inconsistent_df = self.df[
            self.df['Distance totale parcourue (m)'] < (self.df['Longueur totale du parcours (m)'] - tolerance)].copy()

        print("\n" + "=" * 50)
        print("üîé V√âRIFICATION DE LA COH√âRENCE DES DISTANCES TOTALES")
        print(f"**Tol√©rance appliqu√©e : {tolerance} m√®tres**")
        print("=" * 50)

        if not inconsistent_df.empty:
            print(
                f"üîπ {len(inconsistent_df)} lignes trouv√©es o√π 'Distance totale' est inf√©rieure √† 'Longueur totale du parcours' de plus de {tolerance}m.")

            efficiency_issues = inconsistent_df[inconsistent_df['Efficacit√© (Distance r√©elle/id√©ale) (%)'] >= 100]

            if not efficiency_issues.empty:
                print("\n‚ö†Ô∏è Incoh√©rence d√©tect√©e : 'Efficacit√©' >= 100% pour certaines de ces lignes.")
                print(f"Nombre de lignes concern√©es : {len(efficiency_issues)}")
                print("\nAper√ßu des 5 premi√®res lignes avec cette incoh√©rence :")
                print(efficiency_issues[['Nom Complet', 'Nom de l\'√©v√©nement', 'Distance totale parcourue (m)',
                                         'Longueur totale du parcours (m)',
                                         'Efficacit√© (Distance r√©elle/id√©ale) (%)']].head().to_string(index=False))
            else:
                print(
                    "\n‚úÖ Pour toutes ces lignes, la colonne 'Efficacit√©' est bien inf√©rieure √† 100%, ce qui est coh√©rent.")
        else:
            print(f"‚úÖ Aucune incoh√©rence trouv√©e avec une tol√©rance de {tolerance} m√®tres.")

    def supprimer_anomalies(self):
        """
        Supprime les lignes du DataFrame o√π des anomalies et des valeurs aberrantes
        ont √©t√© d√©tect√©es sur la base de crit√®res pr√©d√©finis.
        """
        if self.df is None:
            return

        print("\n" + "=" * 50)
        print("üóëÔ∏è SUPPRESSION DES LIGNES AVEC ANOMALIES ET VALEURS ABERRANTES")
        print("=" * 50)

        initial_rows = len(self.df)

        # Crit√®re 1 : Z-Score √©lev√© sur la 'diff√©rence' entre distance r√©el
        col_distance = 'Longueur du segment (m)'
        col_parcourue = 'Distance r√©elle parcourue segment (m)'

        if col_distance in self.df.columns and col_parcourue in self.df.columns:
            # Calcul de la nouvelle colonne
            self.df['diff_distance'] = self.df[col_distance] - self.df[col_parcourue]

            # Application du Z-Score sur la diff√©rence
            mean_diff = self.df['diff_distance'].mean()
            std_diff = self.df['diff_distance'].std()
            z_score_threshold = 3.0

            outlier_mask = np.abs((self.df['diff_distance'] - mean_diff) / std_diff) > z_score_threshold
            self.df = self.df[~outlier_mask]

            print(
                f"‚úÖ {outlier_mask.sum()} lignes supprim√©es en raison de valeurs aberrantes (Z-Score) sur la diff√©rence de distance.")

            # Suppression de la colonne temporaire
            self.df = self.df.drop(columns=['diff_distance'])
        else:
            print(
                f"‚ö†Ô∏è Colonnes requises ('{col_distance}' ou '{col_parcourue}') introuvables. Le crit√®re 1 n'a pas √©t√© appliqu√©.")

        # Crit√®re 2 : 'Distance r√©elle du segment' plus courte que le segment
        col_longueur = 'Longueur du c√¥t√© du segment (m)'
        if col_distance in self.df.columns and col_longueur in self.df.columns:
            tolerance = 30
            short_distance_mask = self.df[col_distance] < (self.df[col_longueur] - tolerance)
            self.df = self.df[~short_distance_mask]
            print(
                f"‚úÖ {short_distance_mask.sum()} lignes supprim√©es en raison de distances r√©elles anormalement courtes.")

        # Crit√®re 3 : Incoh√©rence de la distance totale et de l'efficacit√©
        col_parcouru_total = 'Distance totale parcourue (m)'
        col_longueur_totale = 'Longueur totale du parcours (m)'
        if col_parcouru_total in self.df.columns and col_longueur_totale in self.df.columns:
            tolerance = 30
            inconsistent_mask = self.df[col_parcouru_total] < (self.df[col_longueur_totale] - tolerance)
            self.df = self.df[~inconsistent_mask]
            print(f"‚úÖ {inconsistent_mask.sum()} lignes supprim√©es en raison d'incoh√©rences sur les distances totales.")

        final_rows = len(self.df)
        print(f"Un total de {initial_rows - final_rows} ligne(s) a √©t√© supprim√©(e).")

    def check_wind_direction_alignment(self):
        """
        V√©rifie la concordance entre 'wind_orientation_metasail' et 'Wind Direction (deg)'.
        Affiche un r√©sum√© du nombre de lignes avec un √©cart de plus de 10 degr√©s.
        """
        print("\n" + "=" * 50)
        print("‚úîÔ∏è V√âRIFICATION DE LA CONCORDANCE DES DIRECTIONS DU VENT")
        print("=" * 50)

        # V√©rifier si les colonnes n√©cessaires existent
        if "wind_orientation_metasail" not in self.df.columns or "Wind Direction (deg)" not in self.df.columns:
            print(
                "‚ùå Colonnes 'wind_orientation_metasail' ou 'Wind Direction (deg)' manquantes. V√©rification impossible.")
            return

        # Remplacer les NaN par une valeur qui sera ignor√©e
        df_temp = self.df.dropna(subset=["wind_orientation_metasail", "Wind Direction (deg)"]).copy()

        if df_temp.empty:
            print("‚ö†Ô∏è Aucune ligne valide pour la v√©rification de la direction du vent.")
            return

        # Calculer la diff√©rence d'angle en tenant compte du passage √† 360/0 degr√©s
        angle_diff = np.abs(df_temp["wind_orientation_metasail"] - df_temp["Wind Direction (deg)"])
        adjusted_angle_diff = np.minimum(angle_diff, 360 - angle_diff)

        # Compter le nombre de lignes o√π l'√©cart est sup√©rieur √† 10 degr√©s
        mismatched_lines = adjusted_angle_diff[adjusted_angle_diff > 10].count()
        total_lines = len(df_temp)

        print(f"üìä R√©sultat de la v√©rification :")
        print(f"  - Total de lignes avec des donn√©es de vent : {total_lines}")
        print(f"  - Lignes avec un √©cart > 10 degr√©s : {mismatched_lines}")
        print(f"  - Pourcentage d'√©cart : {(mismatched_lines / total_lines * 100):.2f}%")
        print("‚úÖ V√©rification termin√©e.")


# --- Bloc d'ex√©cution principal ---
if __name__ == '__main__':
    fichier_nettoye = 'Metasail_Statistics_ML_test_cleaned.xlsx'

    verifier = PerformanceVerifier(fichier_nettoye)

    if verifier.df is not None:
        verifier.detect_outliers_on_distance()
        verifier.identify_short_distances(tolerance=30)
        verifier.check_total_distance_consistency(tolerance=30)
        verifier.check_wind_direction_alignment()  # Appel de la nouvelle fonction
        verifier.supprimer_anomalies()